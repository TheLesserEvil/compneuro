
Hints:
integrate timestep by timestep because the diff eq is not solvable analytically
eulers' int:
dy/dx= f(x,v)
v_n+1 = v_n + h*f(v_n) | (h is the change in time)
---------
2 solutions follow
---------
Niccolo's solution (don't just copy the code)
---------
%author=Niccolo Calcini

function [firing_rate, firing_rate_isi] = exercise_5_3 (injected_current_intensity)
%% Setting parameters...
membrane_resistance = 10;               % MOhm
membrane_time_constant = 10;            % ms
v_rest = -70;                           % mV
v_spike_threshold = -54;                % mV
v_reset = -80;                          % mV
current_time_length = 300;              % ms
simulation_length = 500;                % ms

if nargin == 0
    injected_current_intensity = 2;     % uA
end

%% Setting current stimulation...
current_stimulation = zeros(1, simulation_length);
tmp = (simulation_length-current_time_length)/2;
current_stimulation(1, (tmp:(simulation_length - tmp - 1))) = ones(1, current_time_length);
current_stimulation = current_stimulation.*injected_current_intensity;

%% Simulating potential...
v_array = zeros(1, simulation_length);
v_discrete_time_derivative = zeros(1, simulation_length);   % This is not really the time derivative, as it doesn't take into account the change due to the spike production!
v_array(1,1) = v_rest;
firing_count = 0;

for i_time = 1:(simulation_length-1)
    if (v_array(1, i_time) >= v_spike_threshold)    % When v reaches threshold, fire!
        v_array(1, i_time) = v_reset;
        firing_count = firing_count + 1;    
    end
    v_discrete_time_derivative(1, i_time) = (v_rest - v_array(1, i_time) + membrane_resistance*current_stimulation(1, i_time))/membrane_time_constant;
    v_array(1, i_time+1) = v_array(1, i_time) + v_discrete_time_derivative(1, i_time);
end
% figure(1); plot(v_discrete_time_derivative); title('Potential "time derivative".'); ylabel('dV/dT (mV/ms)'); xlabel('Time (ms)'); 
figure(); plot(v_array); title('Potential.'); ylabel('V (mV)'); xlabel('Time (ms)'); 

firing_rate = firing_count/current_time_length;

log_arg = (membrane_resistance*injected_current_intensity + v_rest - v_reset)/(membrane_resistance*injected_current_intensity + v_rest - v_spike_threshold);
firing_rate_isi = 1/(membrane_time_constant*log(log_arg));

end
---------
Second solution by Filippos
Equivalent in spike frequency
---------
function spikeRate = membSim(I)
%author=filippos
%% set params

Vrest=-70; %mV
Vreset=-80;
Rm=10; % membrane_resistence in MOhm
Tm= 10; % membrane time constant (Rm*Cm)
Cm=Tm/Rm; % membrane capacitance, unused
eL=Vrest; % only for reading ease, value remains constant
Vth=-54; % spiking threshold
Vreset=-80; % mV of post activation potential
simLength=500; % simulation length
injLength=300; % I injection length


%% init timelines

Vtime=zeros(1,simLength); % init membrane potential timeline
Vtime(1)=Vrest; % init membrane potential at rest

% injection current timeseries, center
% Cut the difference of simLength and injLength in two and put it around
% injLength to center it 
Itime=[zeros(1,(simLength-injLength)/2) ones(1,injLength) ...
    zeros(1,(simLength-injLength)/2)]; % 0 = no current, 1 = current

%random_noise=(rand(1,500)+ones(1,500)*-0.5)*2;
random_noise=zeros(1,500);
Itime=(Itime+random_noise)*I ; % Apply current value

%% apply eq 5.8 Tm*(dV/dt)= eL-V + Rm*I

% get temporal derivative
% dV/dt= (eL-V + Rm*I)/Tm
dVdt=@(V,I)((eL-V + Rm*I)/Tm);

%% run simulation

for i=2:(simLength)
    Vtime(i)=Vtime(i-1)+ dVdt(Vtime(i-1),Itime(i-1));
    if Vtime(i)>=Vth %spikes
        Vtime(i)=Vreset;
        Vtime(i-1)=40; %spike!
    end
end

%% implement eq 5.11 Risi=(Tm*ln((Rm*I+eL-Vreset)/(Rm*I+eL-Vth)))-1

Risi=(Tm*log((Rm*I+eL-Vreset)/(Rm*I+eL-Vth)))^-1;
%% output
spikeRate = sum(Vtime>39)/injLength;
figure;
plot(Vtime)
title(sprintf('Membrane V with I=%f: spikerate = %f, Risi=%f',...
    I, spikeRate, Risi));

	
% Third approach by Athena
% nothing new (based on Niccolo's)
% I just used different variables/comments, added plots and implemented a loop to run several tests

v_rest = - 70;  % mV (resting potential of the membrane)
v_reset = - 80; % mV (after the neuron fires, it resets to this value)
v_th = - 54;    % mV (threshold)
v_s = -40;      % mV (value of the spike)

r_m = 10;       % MΩ (total membrane resistance)
tau_m = 10;     % ms (membrane time constant)
sim_len = 500;  % ms (simulation length) - assumed delta(t) = 1 ms
i_e = 0;        % μA (the current)


figure('units','normalized','outerposition',[0 0 1 1]);
for i_e =2:.3:5.3 % repeat the simulation for different currents

    % initialise the simulation %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % the pulse should be 300-ms-long and centered in a 500-ms-long simulation
    current = zeros(1,sim_len);
    current(1,101:400) = i_e;

    % the simulation contains information about the voltage in each delta(t)
    v = zeros(1,sim_len); 
    v(1,1) = v_rest;
    num_spikes = 0; % the number of spikes that have occured
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    % run the simulation
    for c = 2:sim_len
        p = c - 1; % previous index
        
        % fire a spike if the threshold was reached in the previous dt
        if v(1,p) >= v_th
            v(1,p) = v_s;
            num_spikes = num_spikes + 1;
            v(1,c) = v_reset;
        else
            % calculate the voltage at the next dt, based on the equation 5.8
            v(1,c) = v(1,p) + (v_rest - v(1,p) + r_m * current(1,c)) / tau_m;
        end
    end
    
    % determine the firing rate of the model
    fire_rate = num_spikes / 300;
    
    % plot the activity of the neuron during the 500 ms
    subplot(3,4,(i_e-2)*10/3+1); plot(1:500,v); 
    title(sprintf('Ie=%.2f, fire rate=%.3f',i_e,fire_rate)); 
    xlabel('Time (ms)'); ylabel('Voltage (mV)'); 

    disp(sprintf('The fire rate for Ie=%f is %f.',i_e,fire_rate));
end

clear c; clear p;


